openapi: 3.0.3

info:
  version: 0.0.1
  title: Contract-Library
  description: By using this service you can add and get book records

tags:
  - name: "Contract-Library"

paths:
#---------------------------------Client-Filter-----------------------------------------------
  /profile/filter:
    post:
      operationId: filterProfile
      description: it will check the profile validity and if profile is valid it will save it to database
      summary: process profile
      requestBody:
        description: profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/xml:
            schema:
              $ref: '#/components/schemas/Profile'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/FilterResponse'

#---------------------------------Client-Store-----------------------------------------------
  /store/save:
    post:
      operationId: save
      description: it will save the details of profile in aws(DynamoDB)
      summary: save profile
      requestBody:
        description: profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileDto'
      responses:
        '200':
          description: response
          content:
            text/plain:
              schema:
                type: string

  /store/get/{id}:
    get:
      operationId: findById
      description: it will find the details of profile in aws(DynamoDB) based on given id
      summary: find profile
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'

#---------------------------------Load-Generator-------------------------------------------------
  /generate/kafka:
    post:
      operationId: produceDataToKafka
      description: it will sent given profile to kafka
      summary: sent profile to kafka
      requestBody:
        description: profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: ok
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: incorrect payload
          content:
            text/plain:
              schema:
                type: string

  /generate/api:
    post:
      operationId: produceDataToClientFilterApi
      description: it will sent given profile to client-filter application
      summary: sent profile to api
      requestBody:
        description: profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: ok
          content:
            text/plain:
              schema:
                type: string

  /generate/kafka/{n}:
    get:
      operationId: produceRandomProfileToKafka
      description: it will generate n random profiles and sent them to kafka
      summary: generate n random profiles and produce them to kafka
      parameters:
        - name: n
          in: path
          description: no of random profiles to create
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: ok
          content:
            text/plain:
              schema:
                type: string

  /generate/api/{n}:
    get:
      operationId: produceRandomProfileToClientFilterApi
      description: it will generate n random profiles and sent them to client-filter api
      summary: generate n random profiles and sent them to api
      parameters:
        - name: n
          in: path
          description: no of random profiles to create
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: ok
          content:
            text/plain:
              schema:
                type: string

#---------------------------------Components/Models-----------------------------------------------
components:
  schemas:
    ActiveClientProfile:
      discriminator:
        propertyName: type
      description: This is ActiveClientProfile model
      type: object
      properties:
        active:
          description: it states whether record is active or not
          type: boolean
        lastActive:
          description: name of author
          type: date

    Name:
      allOf: # Combines the ActiveClientProfile
        - $ref: '#/components/schemas/ActiveClientProfile'
        - type: object
#          required:
#            - rootCause
          properties:
            firstName:
              type: string
            lastName:
              type: string
            type:
              type: string

    Address:
      allOf: # Combines the ActiveClientProfile
        - $ref: '#/components/schemas/ActiveClientProfile'
        - type: object
          properties:
            line1:
              type: string
            line2:
              type: string
            line3:
              type: string
            line4:
              type: string
            line5:
              type: string
            line6:
              type: string
            line7:
              type: string
            line8:
              type: string
            line9:
              type: string
            line10:
              type: string
            type:
              type: string

    FilterResponse:
      type: object
      properties:
       message:
        type: string

    ProfileDto:
     type: object
     properties:
      id:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      addressLine1:
        type: string
      addressLine2:
        type: string
      addressLine3:
        type: string

    Profile:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        eventTime:
          description: name of author
          type: date
        nameList:
          type: array
          items:
            $ref: "#/components/schemas/Name"
        addressList:
          type: array
          items:
            $ref: "#/components/schemas/Address"


